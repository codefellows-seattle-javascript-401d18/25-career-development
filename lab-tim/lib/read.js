'use-strict';

const fs = require('fs');
const TreeNode = require('./tree');

// Read in an HTML file using the FS module
// Parse that file from a string to an array of usable data
// Using a Stack, we push opening tags until we encounter a closing tag
// Add the current tag to our tree using the surrounding data (recently popped or Peeked tag) to the tree

// require in TreeNode and Stack
// require in fs & promisify

const htmlParser = module.exports = function(filePath) {
  fs.readFileProm(filePath)
  .then(fileBuff => fileBuff.toString().replace(/\s+/g), '')
  .then(fileStr => fileStr.split('>'))
  // then determine if the file is valid HTML (ex. does it have a DOCTYPE html?)
  // then pass the array of elements into a helper called buildTree which takes the Tree Constructor and the array as args
  // then console.log the return value of the previous then block (i.e. what does buildTree return?)
  // catch any errors generated by your helper functions
};


// This is where we define all the helper functions
// Define buildTree here to accept Tree and Array of Elements as args
htmlParser.buildTree(tree, eleArra) {
  // instantiate a stack
  // iterate of the eleArray
  // check if ele is an opening tag (use another helper function)
  // if true
  // get the tag name and determine the parent node...  Consider how to retrieve this piece.
  // add the new TreeNode using the parent reference
  // push the ele to Stack
  // if false
  // pop from the stack
  return tree
}

htmlParser(process.env.argv[2]);
